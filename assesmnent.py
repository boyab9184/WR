import pandas as pd
import datetime
from utils import *


data_frame = pd.read_csv("data/Test_external_data.csv", sep=',')

#converting "Revenue" str to float
data_frame['Revenue'] = data_frame['Revenue'].str.replace(',', '', regex=True).str.replace('$', '', regex=True).astype(float)  


def are_all_client_ids_unique(df):
    '''Takes a dataframe, returns boolean are all client ids unique? '''
    return df['Client Id'].count() == len(df['Client Id'].unique())


def most_profitable_clients (df, limit):
    '''Takes a dataframe, returns NUMBER (second arguments) of most profitable client ids'''
    sorted_df = df.sort_values(by=['Revenue'], ascending=False)

    return sorted_df['Client Id'].head(limit)


def revenue_with_less_than_num_sesions(df, limit): 
    '''Takes a dataframe, returns total revenue generated by all clients with less than NUMBER (second argument) of sessions'''
    less_than_limit_session = df[df['Sessions'] < limit]
    
    return  less_than_limit_session['Revenue'].sum()
    

def half_with_most_transactions_by_sessions(df):
    '''Takes a dataframe, retirning the half(sorted by sessions) of the most transactions, prints info'''
    sorted_by_sessions = df.sort_values(by=['Sessions'])
    count = sorted_by_sessions['Sessions'].count()
    shorter_sessions_half_df = sorted_by_sessions[ : int(count/2)]
    longer_half_sessions_df = sorted_by_sessions[int(count/2) : ]

    if shorter_sessions_half_df['Transactions'].sum() < longer_half_sessions_df['Transactions'].sum():
        return "The half with LONGER sessions has more transactions\n"
    
    return "The half with SHORTER sessions has more transactions\n"
        



def revenue_with_most_transaction_limited(df, limit):
    '''Takes a dataframe(first argument) and return revenue generated by the NUMBER(second argument) client ids with the most transactions.'''
    return sorted_desc_by_transaction(df, limit)['Revenue'].sum()


def avarage_session_duration(df, limit):
    '''Takes a dataframe(first argument) and return aggregated average session duration generated by the NUMBER(second argument) client ids with the most transactions.'''
    limited_df = sorted_desc_by_transaction(df, limit)
    limited_df['Avg. Session Duration'] = pd.to_timedelta(limited_df['Avg. Session Duration'])
    limited_df['Total Session Duration'] = limited_df['Avg. Session Duration'] * limited_df['Sessions']
    aggr_duration = limited_df['Total Session Duration'].sum()
    aggr_duration_sec = aggr_duration.total_seconds()   
    aggr_sessions = limited_df['Sessions'].sum()
    aggr_average_session_sec = aggr_duration_sec/aggr_sessions
    
    return datetime.timedelta(seconds=aggr_average_session_sec)



print("\nWELCOME to Boyan Benev's codding assignment")  


while True:  
    print("\nMAIN MENU")  
    print("1. Are all client ids unique?")  
    print("2. Show NUMBER most profitable client ids")  
    print("3. Calculate the total revenue generated by all clients with less than NUMBER sessions")
    print("4. Who generates the most transactions: the half of the clients with longer sessions or the other half?")
    print("5. Calculate the revenue generated by the NUMBER of client ids with the most transactions")
    print("6. Generate aggregated average session duration by the NUMBER of client ids with the most transactions")
    print("9. Exit\n") 


    user_choice = int (input("Enter your Choice:"))

    if user_choice == 1:
    
       print ('\nThis is: ',are_all_client_ids_unique(data_frame))

    elif user_choice == 2:
        limit = int(input("Enter your NUMBER:")) 
        print ("The %d most profitable client ids are:\n" %(limit),most_profitable_clients(data_frame, limit))

    elif user_choice == 3:
        limit = int(input("Enter your NUMBER:")) 
        print ("\nTotal revenue generated by all clients with less than %d sessions: $" %(limit), "{:.2f}".format(revenue_with_less_than_num_sesions(data_frame, limit)))
        
    elif user_choice == 4:
        print ("\nWho generates the most transactions: ", half_with_most_transactions_by_sessions(data_frame))
        

    elif user_choice == 5:
        limit = int(input("Enter your NUMBER:")) 
        print ("\nRevenue generated by the %d client ids with the most transactions: $" %(limit), "{:.2f}".format (revenue_with_most_transaction_limited(data_frame, limit)))

    elif user_choice == 6:
        limit = int(input("Enter your NUMBER:")) 
        print ("\nAggregated average session duration generated by the %d client ids with the most transactions: " %(limit), avarage_session_duration(data_frame, limit))
            
    elif user_choice == 9:
        break  

    else:  
        print("\nIncorrect Choice. Please try again")  
