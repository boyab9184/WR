import pandas as pd
import utils as uts


data_frame = pd.read_csv("data/Test_external_data.csv", sep=',')

"""converting "Revenue" str to float"""
data_frame['Revenue'] = data_frame['Revenue'].str.replace(',', '', regex=True).str.replace('$', '', regex=True).astype(float)  

def are_all_client_ids_unique(df):
    '''Takes a dataframe, returns boolean are all client ids unique? '''
    return df['Client Id'].count() == len(df['Client Id'].unique())

def most_profitable_clients (df, number):
    '''Takes a dataframe, returns NUMBER (second arguments) of most profitable client ids'''
    df_sorted_by_revenue = df.sort_values(by=['Revenue'], ascending=False)

    return df_sorted_by_revenue['Client Id'].head(number)

def revenue_with_less_than_num_sesions(df, number): 
    '''Takes a dataframe, returns total revenue generated by all clients 
        with less than NUMBER (second argument) of sessions'''
        
    df_less_than_limit_session = df[df['Sessions'] < number]
    
    return  df_less_than_limit_session['Revenue'].sum()
    
def half_with_most_transactions_by_sessions(df):
    '''Takes a dataframe, retirning the half(sorted by sessions) of the most transactions, prints info'''
    
    df_sorted_by_sessions = df.sort_values(by = ['Sessions'])
    count = df_sorted_by_sessions['Sessions'].count()
    df_half_with_shorter_sessions = df_sorted_by_sessions[ : count//2]
    df_half_with_longer_sessions = df_sorted_by_sessions[count//2 : ]

    if df_half_with_shorter_sessions['Transactions'].sum() < df_half_with_longer_sessions['Transactions'].sum():
        return "The half with LONGER sessions generates more transactions\n"
    
    return "The half with SHORTER sessions generates more transactions\n"
        
def revenue_with_most_transaction_limited(df, number):
    '''Takes a dataframe(first argument) and returns revenue generated by 
        the NUMBER(second argument) client ids with the most transactions.'''

    return uts.sorted_desc_by_transaction(df, number)['Revenue'].sum()

def avarage_session_duration(df, number):
    '''Takes a dataframe(first argument) and returns aggregated average session duration 
        generated by the NUMBER(second argument) client ids with the most transactions.'''

    sub_df = uts.sorted_desc_by_transaction(df, number)
    sub_df['Avg. Session Duration'] = pd.to_timedelta(sub_df['Avg. Session Duration'])
    sub_df['Total Session Duration'] = sub_df['Avg. Session Duration'] * sub_df['Sessions']

    return sub_df['Total Session Duration'].sum() / sub_df['Sessions'].sum()

def avarage_bounce_rate(df, number):
    '''Takes a dataframe(first argument) and returns aggregated average bounce rate in % 
        generated by the NUMBER(second argument) client ids with the most transactions.'''

    sub_df = uts.sorted_desc_by_transaction(df, number)
    sub_df['Bounce Rate %'] = sub_df['Bounce Rate'].str.replace('%', '', regex=True).astype(float)
    sub_df['Single Page Sessions'] = (sub_df['Bounce Rate %'] * sub_df['Sessions']) / 100

    return sub_df['Single Page Sessions'].sum() / sub_df['Sessions'].sum() * 100
