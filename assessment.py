import pandas as pd
import datetime
from utils import *


data_frame = pd.read_csv("data/Test_external_data.csv", sep=',')

"""converting "Revenue" str to float"""
data_frame['Revenue'] = data_frame['Revenue'].str.replace(',', '', regex=True).str.replace('$', '', regex=True).astype(float)  

def are_all_client_ids_unique(df):
    '''Takes a dataframe, returns boolean are all client ids unique? '''
    return df['Client Id'].count() == len(df['Client Id'].unique())

def most_profitable_clients (df, number):
    '''Takes a dataframe, returns NUMBER (second arguments) of most profitable client ids'''
    sorted_df = df.sort_values(by=['Revenue'], ascending=False)

    return sorted_df['Client Id'].head(number)

def revenue_with_less_than_num_sesions(df, number): 
    '''Takes a dataframe, returns total revenue generated by all clients 
        with less than NUMBER (second argument) of sessions'''
        
    less_than_limit_session = df[df['Sessions'] < number]
    
    return  less_than_limit_session['Revenue'].sum()
    
def half_with_most_transactions_by_sessions(df):
    '''Takes a dataframe, retirning the half(sorted by sessions) of the most transactions, prints info'''
    sorted_by_sessions = df.sort_values(by = ['Sessions'])
    count = sorted_by_sessions['Sessions'].count()
    shorter_sessions_half_df = sorted_by_sessions[ : int(count/2)]
    longer_half_sessions_df = sorted_by_sessions[int(count/2) : ]

    if shorter_sessions_half_df['Transactions'].sum() < longer_half_sessions_df['Transactions'].sum():
        return "The half with LONGER sessions generates more transactions\n"
    
    return "The half with SHORTER sessions generates more transactions\n"
        
def revenue_with_most_transaction_limited(df, number):
    '''Takes a dataframe(first argument) and return revenue generated by 
        the NUMBER(second argument) client ids with the most transactions.'''

    return sorted_desc_by_transaction(df, number)['Revenue'].sum()

def avarage_session_duration(df, number):
    '''Takes a dataframe(first argument) and return aggregated average session duration 
        generated by the NUMBER(second argument) client ids with the most transactions.'''

    sub_df = sorted_desc_by_transaction(df, number)
    sub_df['Avg. Session Duration'] = pd.to_timedelta(sub_df['Avg. Session Duration'])
    sub_df['Total Session Duration'] = sub_df['Avg. Session Duration'] * sub_df['Sessions']
    aggr_duration = sub_df['Total Session Duration'].sum()
    aggr_duration_sec = aggr_duration.total_seconds()   
    aggr_sessions = sub_df['Sessions'].sum()
    aggr_average_session_sec = aggr_duration_sec/aggr_sessions
    
    return datetime.timedelta(seconds=aggr_average_session_sec)